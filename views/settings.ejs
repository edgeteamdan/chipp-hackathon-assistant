<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Settings - AutoTask</title>
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
  <link rel="icon" type="image/png" href="/images/edgeteam-logo.png">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 80vw;
      margin: 0 auto;
      padding: 20px;
      background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 50%, #F59E0B 100%);
      min-height: 100vh;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin: 0;
      margin-bottom: 20px;
      background: rgba(254, 252, 232, 0.95);
      backdrop-filter: blur(10px);
      padding: 15px 20px;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(245, 158, 11, 0.1);
      border-bottom: 1px solid rgba(245, 158, 11, 0.2);
      flex-wrap: nowrap;
      min-height: 60px;
      width: 100%;
      position: relative;
      box-sizing: border-box;
      gap: 20px;
    }
    .logo {
      display: flex;
      align-items: center;
      gap: 12px;
      flex: 0 0 auto;
      min-width: 0;
    }
    .logo img {
      height: 40px;
      width: auto;
      flex-shrink: 0;
    }
    .logo h1 {
      margin: 0;
      background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-size: 1.5rem;
      font-weight: 700;
      white-space: nowrap;
    }
    .header-center {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      min-width: 0;
      overflow: hidden;
    }
    .subtitle {
      color: #6B7280;
      font-size: 0.875rem;
      white-space: nowrap;
      text-align: center;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .settings-container {
      background: rgba(254, 252, 232, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 8px 32px rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.2);
    }
    .form-group {
      margin-bottom: 24px;
    }
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #374151;
    }
    .form-group input {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 14px;
      transition: border-color 0.2s ease;
      box-sizing: border-box;
    }
    .form-group input:focus {
      outline: none;
      border-color: #F59E0B;
    }
    .form-group .help-text {
      font-size: 12px;
      color: #6B7280;
      margin-top: 4px;
    }
    .btn {
      background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 12px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      text-decoration: none;
      display: inline-block;
      transition: all 0.3s ease;
      box-shadow: 0 4px 16px rgba(245, 158, 11, 0.3);
      margin-right: 12px;
      white-space: nowrap;
    }
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(245, 158, 11, 0.4);
    }
    .btn-secondary {
      background: linear-gradient(135deg, #6B7280 0%, #4B5563 100%);
      box-shadow: 0 4px 16px rgba(107, 114, 128, 0.3);
    }
    .btn-secondary:hover {
      box-shadow: 0 8px 24px rgba(107, 114, 128, 0.4);
    }
    .success {
      background: linear-gradient(135deg, #D1FAE5 0%, #A7F3D0 100%);
      color: #065F46;
      padding: 16px 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      border: 1px solid #6EE7B7;
      font-weight: 500;
      display: none;
    }
    .section-title {
      font-size: 18px;
      font-weight: 700;
      color: #374151;
      margin-bottom: 16px;
      padding-bottom: 8px;
      border-bottom: 2px solid #F59E0B;
    }
    .edgeteam-link {
      color: #F59E0B;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.2s ease;
    }
    .edgeteam-link:hover {
      color: #D97706;
      text-decoration: underline;
    }

    /* Responsive header - Progressive breakpoints to prevent overlapping */
    @media (max-width: 1200px) {
      .subtitle {
        font-size: 0.8rem;
      }
      .header {
        gap: 15px;
      }
    }

    @media (max-width: 1024px) {
      .subtitle {
        font-size: 0.75rem;
      }
      .header {
        gap: 12px;
        padding: 12px 16px;
      }
      .logo h1 {
        font-size: 1.3rem;
      }
    }

    @media (max-width: 900px) {
      .header-center {
        display: none;
      }
      .header {
        justify-content: space-between;
        gap: 10px;
      }
    }

    @media (max-width: 768px) {
      .header {
        flex-direction: column;
        gap: 15px;
        text-align: center;
        padding: 15px;
      }
      .logo {
        justify-content: center;
        flex: none;
      }
      .logo h1 {
        font-size: 1.25rem;
      }
      .header-center {
        display: flex;
        order: 3;
      }
      .subtitle {
        font-size: 0.75rem;
      }
    }

    @media (max-width: 480px) {
      .header {
        padding: 12px;
      }
      .logo h1 {
        font-size: 1.125rem;
      }
      .logo img {
        height: 32px;
      }
      .btn {
        padding: 8px 16px;
        font-size: 12px;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <a href="/" class="logo" style="text-decoration: none; color: inherit;">
      <img src="/images/autotask-logo.svg" alt="AutoTask Logo">
      <h1>AutoTask</h1>
    </a>
    <div class="header-center">
      <span class="subtitle">Powered by <a href="https://edgeteam.io" target="_blank" class="edgeteam-link"><img src="/images/edgeteam-logo.png" alt="EdgeTeam" style="height: 16px; width: auto; vertical-align: middle; margin-right: 4px;">EdgeTeam</a> √ó <a href="https://chipp.ai" target="_blank" class="edgeteam-link"><img src="/images/chipp-logo.svg" alt="Chipp.ai" style="height: 16px; width: auto; vertical-align: middle;"></a></span>
    </div>
    <div>
      <a href="/instructions" class="btn btn-secondary">üìñ Instructions</a>
      <a href="/" class="btn btn-secondary">‚Üê Back to App</a>
    </div>
  </div>

  <div class="settings-container">
    <div id="success-message" class="success">
      ‚úÖ Settings saved successfully! Your credentials are stored locally in your browser.
    </div>

    <div id="cleared-message" class="success" style="background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%); color: #92400E; border: 1px solid #F59E0B; display: none;">
      üîÑ <strong>Credentials Cleared!</strong><br>
      Your authentication credentials have been cleared due to authentication errors. Please re-enter your API credentials below and try logging in again.
    </div>

    <!-- Import Options -->
    <div class="import-section" style="margin-bottom: 32px; padding: 24px; background: rgba(255, 255, 255, 0.7); border-radius: 12px; border-left: 4px solid #10B981;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
        <h3 style="margin: 0; color: #374151;">üì¶ Bulk Import Options</h3>
        <button type="button" onclick="toggleImportSection()" class="btn btn-secondary" id="import-toggle-btn" style="padding: 8px 16px; font-size: 14px;">
          ‚ñº Show Options
        </button>
      </div>
      <div id="import-content" style="display: none;">

      <!-- .env File Import -->
      <div class="import-option" style="margin-bottom: 20px;">
        <h4 style="margin: 0 0 8px 0; color: #374151;">üìÑ Import from .env Format</h4>
        <p style="margin: 0 0 12px 0; color: #6B7280; font-size: 14px;">Paste your .env file content to auto-populate all fields:</p>
        <textarea id="env-import" placeholder="CHIPP_API_KEY=live_xxxxxxxx
GOOGLE_CLIENT_ID=xxxxxxxxx.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=GOCSPX-xxxxxxxx
CLICKUP_CLIENT_ID=XXXXXXXX
CLICKUP_CLIENT_SECRET=XXXXXXXX" style="width: 100%; height: 120px; padding: 12px; border: 2px solid #E5E7EB; border-radius: 8px; font-family: monospace; font-size: 12px; resize: vertical; box-sizing: border-box;"></textarea>
        <button type="button" onclick="importFromEnv()" class="btn" style="margin-top: 8px;">üì• Import from .env</button>
      </div>

      <!-- JSON Import -->
      <div class="import-option" style="margin-bottom: 20px;">
        <h4 style="margin: 0 0 8px 0; color: #374151;">üìã Import from JSON</h4>
        <p style="margin: 0 0 12px 0; color: #6B7280; font-size: 14px;">Paste JSON configuration:</p>
        <textarea id="json-import" placeholder='{
  "chippApiKey": "live_xxxxxxxx",
  "googleClientId": "xxxxxxxxx.apps.googleusercontent.com",
  "googleClientSecret": "GOCSPX-xxxxxxxx",
  "clickupClientId": "XXXXXXXX",
  "clickupClientSecret": "XXXXXXXX"
}' style="width: 100%; height: 100px; padding: 12px; border: 2px solid #E5E7EB; border-radius: 8px; font-family: monospace; font-size: 12px; resize: vertical; box-sizing: border-box;"></textarea>
        <button type="button" onclick="importFromJson()" class="btn" style="margin-top: 8px;">üì• Import from JSON</button>
      </div>

      <!-- File Import -->
      <div class="import-option">
        <h4 style="margin: 0 0 8px 0; color: #374151;">üìÅ Import from File</h4>
        <p style="margin: 0 0 12px 0; color: #6B7280; font-size: 14px;">Upload a .env, .json, or .txt file with your credentials:</p>
        <input type="file" id="file-import" accept=".env,.json,.txt" style="margin-bottom: 8px;">
        <button type="button" onclick="importFromFile()" class="btn" style="margin-left: 8px;">üì• Import from File</button>
      </div>
      </div>
    </div>

    <form id="settings-form">
      <div class="section-title">ü§ñ Chipp.ai Configuration</div>
      <div class="form-group">
        <label for="chipp-api-key">Chipp API Key</label>
        <input type="password" id="chipp-api-key" name="chippApiKey" placeholder="live_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx">
        <div class="help-text">Get your API key from <a href="https://app.chipp.ai" target="_blank">Chipp.ai Dashboard (Share tab under your Chipp app)</a></div>
      </div>

      <div class="section-title">üìß Google OAuth Configuration</div>
      <div class="callback-url-info" id="google-callback-info" style="margin-bottom: 16px; padding: 12px; background: #FEF3C7; border-radius: 8px; border: 1px solid #F59E0B;">
        <strong>üìã Redirect URI for Google OAuth:</strong><br>
        <code id="google-callback-url" style="background: white; padding: 4px 8px; border-radius: 4px; font-family: monospace;">Loading...</code><br>
        <small style="color: #92400E;">Add this URL to your <a href="https://console.cloud.google.com/apis/credentials" target="_blank">Google Cloud Console</a> OAuth 2.0 credentials</small>
      </div>
      <div class="form-group">
        <label for="google-client-id">Google Client ID</label>
        <input type="text" id="google-client-id" name="googleClientId" placeholder="xxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com">
        <div class="help-text">From <a href="https://console.cloud.google.com/apis/credentials" target="_blank">Google Cloud Console</a></div>
      </div>
      <div class="form-group">
        <label for="google-client-secret">Google Client Secret</label>
        <input type="password" id="google-client-secret" name="googleClientSecret" placeholder="GOCSPX-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx">
        <div class="help-text">Keep this secret secure</div>
      </div>

      <div class="section-title">üéØ ClickUp OAuth Configuration</div>
      <div class="callback-url-info" id="clickup-callback-info" style="margin-bottom: 16px; padding: 12px; background: #FEF3C7; border-radius: 8px; border: 1px solid #F59E0B;">
        <strong>üìã Redirect URI for ClickUp OAuth:</strong><br>
        <code id="clickup-callback-url" style="background: white; padding: 4px 8px; border-radius: 4px; font-family: monospace;">Loading...</code><br>
        <small style="color: #92400E;">Add this URL to your <a href="https://app.clickup.com/settings/team/clickup-api" target="_blank">ClickUp App settings</a></small>
      </div>
      <div class="form-group">
        <label for="clickup-client-id">ClickUp Client ID</label>
        <input type="text" id="clickup-client-id" name="clickupClientId" placeholder="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX">
        <div class="help-text">From <a href="https://app.clickup.com/settings/team/clickup-api" target="_blank">ClickUp API Console</a></div>
      </div>
      <div class="form-group">
        <label for="clickup-client-secret">ClickUp Client Secret</label>
        <input type="password" id="clickup-client-secret" name="clickupClientSecret" placeholder="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX">
        <div class="help-text">Keep this secret secure</div>
      </div>

      <div style="margin-top: 32px;">
        <button type="submit" class="btn">üíæ Save Settings</button>
        <button type="button" class="btn btn-secondary" onclick="testConfiguration()">üß™ Test Configuration</button>
        <button type="button" class="btn btn-secondary" onclick="exportSettings()">üì§ Export Settings</button>
        <button type="button" class="btn btn-secondary" onclick="clearSettings()">üóëÔ∏è Clear All</button>
      </div>
    </form>
  </div>

  <script>
    // Load settings from localStorage on page load
    window.addEventListener('DOMContentLoaded', function() {
      loadSettings();
      loadCallbackUrls();
      checkIfClearedCredentials();
    });

    // Check if user was redirected here after clearing credentials
    function checkIfClearedCredentials() {
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('cleared') === 'true') {
        const clearedMessage = document.getElementById('cleared-message');
        clearedMessage.style.display = 'block';

        // Auto-hide after 10 seconds
        setTimeout(() => {
          clearedMessage.style.display = 'none';
        }, 10000);

        // Remove the parameter from URL without refreshing
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
      }
    }

    // Toggle import section visibility
    function toggleImportSection() {
      const content = document.getElementById('import-content');
      const button = document.getElementById('import-toggle-btn');

      if (content.style.display === 'none') {
        content.style.display = 'block';
        button.textContent = '‚ñ≤ Hide Options';
      } else {
        content.style.display = 'none';
        button.textContent = '‚ñº Show Options';
      }
    }

    async function loadCallbackUrls() {
      try {
        const response = await fetch('/config/callback-urls');
        const data = await response.json();

        document.getElementById('google-callback-url').textContent = data.google.redirectUri;
        document.getElementById('clickup-callback-url').textContent = data.clickup.redirectUri;
      } catch (error) {
        console.error('Error loading callback URLs:', error);
        document.getElementById('google-callback-url').textContent = 'Error loading URL';
        document.getElementById('clickup-callback-url').textContent = 'Error loading URL';
      }
    }

    function loadSettings() {
      const settings = getStoredSettings();

      if (settings.chippApiKey) document.getElementById('chipp-api-key').value = settings.chippApiKey;
      if (settings.googleClientId) document.getElementById('google-client-id').value = settings.googleClientId;
      if (settings.googleClientSecret) document.getElementById('google-client-secret').value = settings.googleClientSecret;
      if (settings.clickupClientId) document.getElementById('clickup-client-id').value = settings.clickupClientId;
      if (settings.clickupClientSecret) document.getElementById('clickup-client-secret').value = settings.clickupClientSecret;
    }

    function getStoredSettings() {
      return {
        chippApiKey: localStorage.getItem('autotask_chipp_api_key'),
        googleClientId: localStorage.getItem('autotask_google_client_id'),
        googleClientSecret: localStorage.getItem('autotask_google_client_secret'),
        clickupClientId: localStorage.getItem('autotask_clickup_client_id'),
        clickupClientSecret: localStorage.getItem('autotask_clickup_client_secret')
      };
    }

    function saveSettings(settings) {
      localStorage.setItem('autotask_chipp_api_key', settings.chippApiKey || '');
      localStorage.setItem('autotask_google_client_id', settings.googleClientId || '');
      localStorage.setItem('autotask_google_client_secret', settings.googleClientSecret || '');
      localStorage.setItem('autotask_clickup_client_id', settings.clickupClientId || '');
      localStorage.setItem('autotask_clickup_client_secret', settings.clickupClientSecret || '');
    }

    function clearSettings() {
      if (confirm('Are you sure you want to clear all settings? This cannot be undone.')) {
        localStorage.removeItem('autotask_chipp_api_key');
        localStorage.removeItem('autotask_google_client_id');
        localStorage.removeItem('autotask_google_client_secret');
        localStorage.removeItem('autotask_clickup_client_id');
        localStorage.removeItem('autotask_clickup_client_secret');

        // Clear form
        document.getElementById('settings-form').reset();

        showSuccessMessage('Settings cleared successfully!');
      }
    }

    function showSuccessMessage(message) {
      const successDiv = document.getElementById('success-message');
      successDiv.textContent = message;
      successDiv.style.display = 'block';

      setTimeout(() => {
        successDiv.style.display = 'none';
      }, 3000);
    }

    // Import from .env format
    function importFromEnv() {
      const envText = document.getElementById('env-import').value.trim();
      if (!envText) {
        alert('Please paste your .env file content first.');
        return;
      }

      try {
        const settings = {};
        const lines = envText.split('\n');

        for (const line of lines) {
          const trimmedLine = line.trim();
          if (trimmedLine && !trimmedLine.startsWith('#')) {
            const [key, ...valueParts] = trimmedLine.split('=');
            const value = valueParts.join('=').replace(/^["']|["']$/g, ''); // Remove quotes

            switch (key.trim()) {
              case 'CHIPP_API_KEY':
                settings.chippApiKey = value;
                break;
              case 'GOOGLE_CLIENT_ID':
                settings.googleClientId = value;
                break;
              case 'GOOGLE_CLIENT_SECRET':
                settings.googleClientSecret = value;
                break;
              case 'CLICKUP_CLIENT_ID':
                settings.clickupClientId = value;
                break;
              case 'CLICKUP_CLIENT_SECRET':
                settings.clickupClientSecret = value;
                break;
            }
          }
        }

        populateForm(settings);
        showSuccessMessage('‚úÖ Settings imported from .env format!');

        // Clear the import textarea
        document.getElementById('env-import').value = '';

      } catch (error) {
        alert('Error parsing .env format: ' + error.message);
      }
    }

    // Import from JSON format
    function importFromJson() {
      const jsonText = document.getElementById('json-import').value.trim();
      if (!jsonText) {
        alert('Please paste your JSON configuration first.');
        return;
      }

      try {
        const settings = JSON.parse(jsonText);
        populateForm(settings);
        showSuccessMessage('‚úÖ Settings imported from JSON!');

        // Clear the import textarea
        document.getElementById('json-import').value = '';

      } catch (error) {
        alert('Error parsing JSON: ' + error.message);
      }
    }

    // Import from file
    function importFromFile() {
      const fileInput = document.getElementById('file-import');
      const file = fileInput.files[0];

      if (!file) {
        alert('Please select a file first.');
        return;
      }

      const reader = new FileReader();
      reader.onload = function(e) {
        const content = e.target.result;

        try {
          if (file.name.endsWith('.json')) {
            const settings = JSON.parse(content);
            populateForm(settings);
            showSuccessMessage('‚úÖ Settings imported from JSON file!');
          } else {
            // Treat as .env format
            document.getElementById('env-import').value = content;
            importFromEnv();
          }

          // Clear file input
          fileInput.value = '';

        } catch (error) {
          alert('Error reading file: ' + error.message);
        }
      };

      reader.readAsText(file);
    }

    // Helper function to populate form fields
    function populateForm(settings) {
      if (settings.chippApiKey) document.getElementById('chipp-api-key').value = settings.chippApiKey;
      if (settings.googleClientId) document.getElementById('google-client-id').value = settings.googleClientId;
      if (settings.googleClientSecret) document.getElementById('google-client-secret').value = settings.googleClientSecret;
      if (settings.clickupClientId) document.getElementById('clickup-client-id').value = settings.clickupClientId;
      if (settings.clickupClientSecret) document.getElementById('clickup-client-secret').value = settings.clickupClientSecret;
    }

    // Export settings
    function exportSettings() {
      const settings = getStoredSettings();

      if (!settings.chippApiKey && !settings.googleClientId && !settings.clickupClientId) {
        alert('No settings to export. Please configure your credentials first.');
        return;
      }

      // Create export options
      const format = prompt('Export format:\n1. JSON\n2. .env\n\nEnter 1 or 2:', '1');

      if (format === '1') {
        exportAsJson(settings);
      } else if (format === '2') {
        exportAsEnv(settings);
      } else if (format !== null) {
        alert('Invalid format. Please enter 1 for JSON or 2 for .env');
      }
    }

    function exportAsJson(settings) {
      const jsonData = JSON.stringify(settings, null, 2);
      downloadFile('autotask-ai-config.json', jsonData, 'application/json');
    }

    function exportAsEnv(settings) {
      const envData = `# AutoTask Configuration
# Generated on ${new Date().toISOString()}

CHIPP_API_KEY=${settings.chippApiKey || ''}
GOOGLE_CLIENT_ID=${settings.googleClientId || ''}
GOOGLE_CLIENT_SECRET=${settings.googleClientSecret || ''}
CLICKUP_CLIENT_ID=${settings.clickupClientId || ''}
CLICKUP_CLIENT_SECRET=${settings.clickupClientSecret || ''}`;

      downloadFile('autotask-ai-config.env', envData, 'text/plain');
    }

    function downloadFile(filename, content, mimeType) {
      const blob = new Blob([content], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      showSuccessMessage(`‚úÖ Settings exported as ${filename}!`);
    }

    // Test configuration
    function testConfiguration() {
      const settings = {
        chippApiKey: document.getElementById('chipp-api-key').value,
        googleClientId: document.getElementById('google-client-id').value,
        googleClientSecret: document.getElementById('google-client-secret').value,
        clickupClientId: document.getElementById('clickup-client-id').value,
        clickupClientSecret: document.getElementById('clickup-client-secret').value
      };

      let results = [];
      let allValid = true;

      // Test Chipp API Key
      if (settings.chippApiKey) {
        if (settings.chippApiKey.startsWith('live_')) {
          results.push('‚úÖ Chipp API Key: Valid format');
        } else {
          results.push('‚ùå Chipp API Key: Should start with "live_"');
          allValid = false;
        }
      } else {
        results.push('‚ö†Ô∏è Chipp API Key: Not provided');
        allValid = false;
      }

      // Test Google OAuth
      if (settings.googleClientId && settings.googleClientSecret) {
        if (settings.googleClientId.includes('.apps.googleusercontent.com')) {
          results.push('‚úÖ Google OAuth: Valid Client ID format');
        } else {
          results.push('‚ùå Google OAuth: Invalid Client ID format');
          allValid = false;
        }

        if (settings.googleClientSecret.startsWith('GOCSPX-')) {
          results.push('‚úÖ Google OAuth: Valid Client Secret format');
        } else {
          results.push('‚ö†Ô∏è Google OAuth: Client Secret format may be incorrect');
        }
      } else {
        results.push('‚ùå Google OAuth: Client ID and Secret required');
        allValid = false;
      }

      // Test ClickUp OAuth
      if (settings.clickupClientId && settings.clickupClientSecret) {
        results.push('‚úÖ ClickUp OAuth: Client ID and Secret provided');
      } else {
        results.push('‚ùå ClickUp OAuth: Client ID and Secret required');
        allValid = false;
      }

      // Show results
      const resultMessage = results.join('\n');
      const summary = allValid ?
        'üéâ All configurations look good!' :
        '‚ö†Ô∏è Some configurations need attention.';

      alert(`Configuration Test Results:\n\n${resultMessage}\n\n${summary}`);
    }

    // Handle form submission
    document.getElementById('settings-form').addEventListener('submit', function(e) {
      e.preventDefault();

      const formData = new FormData(e.target);
      const settings = {
        chippApiKey: formData.get('chippApiKey'),
        googleClientId: formData.get('googleClientId'),
        googleClientSecret: formData.get('googleClientSecret'),
        clickupClientId: formData.get('clickupClientId'),
        clickupClientSecret: formData.get('clickupClientSecret')
      };

      saveSettings(settings);
      showSuccessMessage('‚úÖ Settings saved successfully! Your credentials are stored locally in your browser.');
    });
  </script>
</body>
</html>
