<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AutoTask AI - Powered by EdgeTeam √ó Chipp.ai</title>
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
  <link rel="icon" type="image/png" href="/images/edgeteam-logo.png">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
      background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 50%, #F59E0B 100%);
      min-height: 100vh;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
      background: rgba(254, 252, 232, 0.95);
      backdrop-filter: blur(10px);
      padding: 20px;
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.2);
    }
    .logo {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    .logo img {
      height: 40px;
      width: auto;
    }
    .logo h1 {
      margin: 0;
      background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-size: 1.5rem;
      font-weight: 700;
    }
    .logo .subtitle {
      color: #6B7280;
      font-size: 0.875rem;
      margin-left: 10px;
    }
    .user-info {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    .user-info img {
      border-radius: 50%;
      width: 40px;
      height: 40px;
    }
    .email-card {
      background: rgba(254, 252, 232, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      padding: 24px;
      margin-bottom: 20px;
      box-shadow: 0 8px 32px rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.2);
      transition: all 0.3s ease;
    }
    .email-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 40px rgba(245, 158, 11, 0.2);
    }
    .email-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 15px;
    }
    .email-subject {
      font-weight: bold;
      font-size: 1.1em;
      color: #333;
    }
    .email-from, .email-date {
      color: #666;
      font-size: 0.9em;
    }
    .email-snippet {
      margin-bottom: 15px;
      color: #555;
      line-height: 1.5;
    }
    .chipp-response {
      background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
      color: white;
      padding: 24px;
      border-radius: 16px;
      margin-top: 20px;
      white-space: pre-line;
      box-shadow: 0 8px 32px rgba(245, 158, 11, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .chipp-response h3 {
      margin-top: 0;
      color: #fff;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .btn {
      background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 12px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 600;
      text-decoration: none;
      display: inline-block;
      transition: all 0.3s ease;
      box-shadow: 0 4px 16px rgba(245, 158, 11, 0.3);
      white-space: nowrap;
    }
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(245, 158, 11, 0.4);
    }
    .btn-google {
      background: linear-gradient(135deg, #4285f4 0%, #1976d2 100%);
      box-shadow: 0 4px 16px rgba(66, 133, 244, 0.3);
    }
    .btn-google:hover {
      box-shadow: 0 8px 24px rgba(66, 133, 244, 0.4);
    }
    .btn-secondary {
      background: linear-gradient(135deg, #6B7280 0%, #4B5563 100%);
      box-shadow: 0 4px 16px rgba(107, 114, 128, 0.3);
    }
    .btn-secondary:hover {
      box-shadow: 0 8px 24px rgba(107, 114, 128, 0.4);
    }
    .intro {
      text-align: center;
      background: rgba(254, 252, 232, 0.95);
      backdrop-filter: blur(10px);
      padding: 48px;
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.2);
    }
    .actions {
      margin-bottom: 30px;
      text-align: center;
    }
    .error {
      background: linear-gradient(135deg, #FEE2E2 0%, #FECACA 100%);
      color: #DC2626;
      padding: 16px 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      border: 1px solid #FCA5A5;
      font-weight: 500;
    }
    .empty-state {
      text-align: center;
      padding: 48px;
      background: rgba(254, 252, 232, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      box-shadow: 0 8px 32px rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.2);
    }
    .clickup-section {
      background: rgba(254, 252, 232, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      padding: 24px;
      margin-bottom: 30px;
      box-shadow: 0 8px 32px rgba(245, 158, 11, 0.1);
      border: 1px solid rgba(245, 158, 11, 0.2);
    }
    .clickup-status {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 15px;
    }
    .status-indicator {
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
    .status-connected { background: #10B981; }
    .status-disconnected { background: #EF4444; }
    .btn-clickup {
      background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%);
      box-shadow: 0 4px 16px rgba(220, 38, 38, 0.3);
    }
    .btn-clickup:hover {
      box-shadow: 0 8px 24px rgba(220, 38, 38, 0.4);
    }
    .workspace-selector {
      margin-top: 15px;
    }
    .workspace-selector select {
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #D1D5DB;
      font-size: 14px;
      margin-bottom: 10px;
    }
    .success {
      background: linear-gradient(135deg, #D1FAE5 0%, #A7F3D0 100%);
      color: #065F46;
      padding: 16px 20px;
      border-radius: 12px;
      margin-bottom: 20px;
      border: 1px solid #6EE7B7;
      font-weight: 500;
      position: relative;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: opacity 0.5s ease-out;
    }
    .success.fade-out {
      opacity: 0;
    }
    .close-btn {
      background: none;
      border: none;
      color: #065F46;
      font-size: 18px;
      cursor: pointer;
      padding: 0;
      margin-left: 10px;
      line-height: 1;
      opacity: 0.7;
      transition: opacity 0.2s ease;
    }
    .close-btn:hover {
      opacity: 1;
    }
    .edgeteam-link {
      color: #F59E0B;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.2s ease;
    }
    .edgeteam-link:hover {
      color: #D97706;
      text-decoration: underline;
    }
    .chipp-link {
      color: #F59E0B;
      text-decoration: none;
      font-weight: 600;
      transition: color 0.2s ease;
    }
    .chipp-link:hover {
      color: #D97706;
      text-decoration: underline;
    }
    .task-success {
      margin-bottom: 15px;
    }
    .task-link-container {
      margin-top: 10px;
    }
    .loading {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      color: #F59E0B;
      font-weight: 500;
    }
    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid #E5E7EB;
      border-top: 2px solid #F59E0B;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .processing-status {
      margin-top: 10px;
      padding: 12px;
      border-radius: 8px;
      font-size: 14px;
    }
    .processing-status.loading {
      background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%);
      border: 1px solid #F59E0B;
    }
    .processing-status.success {
      background: linear-gradient(135deg, #D1FAE5 0%, #A7F3D0 100%);
      border: 1px solid #6EE7B7;
      color: #065F46;
    }
    .processing-status.error {
      background: linear-gradient(135deg, #FEE2E2 0%, #FECACA 100%);
      border: 1px solid #FCA5A5;
      color: #DC2626;
    }
    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
      box-shadow: none !important;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="logo">
      <img src="/images/edgeteam-logo.png" alt="EdgeTeam Logo">
      <div>
        <h1>AutoTask AI</h1>
        <span class="subtitle">Powered by <a href="https://edgeteam.io" target="_blank" class="edgeteam-link"><img src="/images/edgeteam-logo.png" alt="EdgeTeam" style="height: 16px; width: auto; vertical-align: middle; margin-right: 4px;">EdgeTeam</a> √ó <a href="https://chipp.ai" target="_blank" class="chipp-link"><img src="/images/chipp-logo.svg" alt="Chipp.ai" style="height: 16px; width: auto; vertical-align: middle;"></a></span>
      </div>
    </div>
    <% if (user) { %>
      <div class="user-info">
        <img src="<%= user.picture %>" alt="Profile">
        <span><%= user.name %></span>
        <a href="/instructions" class="btn btn-secondary">üìñ Instructions</a>
        <a href="/settings" class="btn btn-secondary">‚öôÔ∏è Settings</a>
        <a href="/auth/logout" class="btn">Logout</a>
      </div>
    <% } else { %>
      <div class="user-info">
        <a href="/instructions" class="btn btn-secondary">üìñ Instructions</a>
        <a href="/settings" class="btn btn-secondary">‚öôÔ∏è Settings</a>
        <button class="btn btn-google" onclick="loginWithGoogle()">üîê Login with Google</button>
      </div>
    <% } %>
  </div>

  <% if (error) { %>
    <div class="error">
      <% if (error === 'auth_failed') { %>
        Authentication failed. Please try again.
      <% } else if (error === 'fetch_failed') { %>
        Failed to fetch emails. Please try again.
      <% } else if (error === 'chipp_failed') { %>
        Failed to process with Chipp.ai. Please try again.
      <% } else if (error === 'clickup_no_code') { %>
        ClickUp authorization failed - no code received. Please try again.
      <% } else if (error === 'clickup_auth_failed') { %>
        ClickUp authentication failed. Please check your credentials and try again.
      <% } else if (error === 'auth_required') { %>
        Please login with Google first before connecting ClickUp.
      <% } else { %>
        An error occurred. Please try again.
      <% } %>
    </div>
  <% } %>

  <% if (clickupAuth === 'success') { %>
    <div class="success" id="clickup-success-message">
      <span>‚úÖ ClickUp authentication successful! Please configure your default workspace below.</span>
      <button class="close-btn" onclick="closeSuccessMessage()" title="Close">&times;</button>
    </div>
  <% } %>

  <% if (user) { %>
    <div class="actions">
      <button class="btn" onclick="fetchEmails()" id="fetchEmailsBtn">üìß Fetch Latest Emails</button>
      <div id="fetch-status" class="processing-status" style="display: none; margin-top: 15px;"></div>
    </div>

    <!-- ClickUp Integration Section -->
    <div class="clickup-section">
      <h3>üîó ClickUp Integration</h3>
      <div class="clickup-status">
        <% if (clickup && clickup.access_token) { %>
          <div class="status-indicator status-connected"></div>
          <span>Connected to ClickUp</span>
          <% if (clickup.configured && clickup.defaultList) { %>
            <span style="margin-left: 10px; color: #10B981;">‚úì Configured (Default: <%= clickup.defaultList.name %>)</span>
          <% } else { %>
            <span style="margin-left: 10px; color: #F59E0B;">‚ö†Ô∏è Configuration needed</span>
          <% } %>
        <% } else { %>
          <div class="status-indicator status-disconnected"></div>
          <span>Not connected to ClickUp</span>
        <% } %>
      </div>

      <% if (!clickup || !clickup.access_token) { %>
        <p>Connect your ClickUp account to enable automatic task creation from emails.</p>
        <button class="btn btn-clickup" onclick="connectClickUp()">üîó Connect ClickUp</button>
      <% } else if (!clickup.configured) { %>
        <p>Choose your default workspace and list for task creation:</p>
        <div class="workspace-selector">
          <select id="workspaceSelect" onchange="onWorkspaceChange()">
            <option value="">Select a workspace...</option>
          </select>
          <button id="configureBtn" class="btn btn-clickup" onclick="configureClickUp()" disabled>
            ‚úÖ Configure Default List
          </button>
        </div>
      <% } else { %>
        <p>‚úÖ ClickUp is configured and ready! Tasks will be created in: <strong><%= clickup.defaultList.name %></strong></p>
        <button class="btn btn-clickup" onclick="reconfigureClickUp()">üîÑ Reconfigure</button>
      <% } %>
    </div>

    <% if (emails && emails.length > 0) { %>
      <h2>üì¨ Your Recent Emails</h2>
      <% emails.forEach(email => { %>
        <div class="email-card">
          <div class="email-header">
            <div class="email-subject"><%= email.subject %></div>
            <div class="email-date"><%= email.date %></div>
          </div>
          <div class="email-from">From: <%= email.from %></div>
          <div class="email-snippet"><%= email.snippet %></div>

          <div id="email-<%= email.id %>-actions">
            <% if (email.chippResponse) { %>
              <% if (email.clickupTaskUrl) { %>
                <!-- ClickUp task was successfully created -->
                <div class="success task-success">
                  <span>‚úÖ Task created successfully!</span>
                  <button class="close-btn" onclick="closeTaskSuccess('<%= email.id %>')" title="Close">&times;</button>
                </div>
                <div class="task-link-container">
                  <a href="<%= email.clickupTaskUrl %>" target="_blank" class="btn btn-clickup">
                    üîó View Task in ClickUp
                  </a>
                </div>
              <% } else { %>
                <!-- Show full response for non-ClickUp responses -->
                <div class="chipp-response">
                  <h3>üéØ AutoTask AI Suggestion:</h3>
                  <div class="response-content"><%= email.chippResponse %></div>
                </div>
              <% } %>
            <% } else { %>
              <button type="button" class="btn" onclick="processEmail('<%= email.id %>')">
                üöÄ Create Task from Email
              </button>
              <div id="status-<%= email.id %>" class="processing-status" style="display: none;"></div>
            <% } %>
          </div>
        </div>
      <% }) %>
    <% } else if (user) { %>
      <div class="empty-state">
        <h3>üì≠ No emails loaded yet</h3>
        <p>Click "Fetch Latest Emails" to get started with AutoTask AI!</p>
      </div>
    <% } %>
  <% } else { %>
    <div class="intro">
      <h2>üéØ Welcome to AutoTask AI</h2>
      <p><strong>Powered by <a href="https://edgeteam.io" target="_blank" class="edgeteam-link"><img src="/images/edgeteam-logo.png" alt="EdgeTeam" style="height: 16px; width: auto; vertical-align: middle; margin-right: 4px;">EdgeTeam</a> √ó <a href="https://chipp.ai" target="_blank" class="chipp-link"><img src="/images/chipp-logo.svg" alt="Chipp.ai" style="height: 16px; width: auto; vertical-align: middle;"></a></strong></p>
      <p>Transform your Gmail inbox into actionable ClickUp tasks automatically using advanced AI!</p>
      <p>This intelligent assistant analyzes your emails and suggests comprehensive task details:</p>
      <ul style="text-align: left; display: inline-block; margin: 20px 0;">
        <li>üìù Smart task titles</li>
        <li>üìã Detailed descriptions</li>
        <li>üìÖ Suggested due dates</li>
        <li>üè∑Ô∏è Priority levels</li>
        <li>üéØ Action items extraction</li>
      </ul>

      <div style="margin-top: 24px; padding: 20px; background: #FEF3C7; border-radius: 12px; border: 2px solid #F59E0B;">
        <h3 style="margin: 0 0 12px 0; color: #92400E;">üîß First Time Setup Required</h3>
        <p style="margin: 0 0 16px 0; color: #92400E;">Before you can use AutoTask AI, you'll need to configure your API credentials for security and privacy.</p>
        <a href="/instructions" class="btn" style="margin-right: 12px;">üìñ View Setup Instructions</a>
        <a href="/settings" class="btn btn-secondary">‚öôÔ∏è Go to Settings</a>
      </div>

      <p style="margin-top: 20px;"><strong>After setup, login with your Google account to experience the future of email productivity.</strong></p>
    </div>
  <% } %>

  <script>
    let workspaces = [];
    let selectedWorkspace = null;

    // Client-side authentication functions
    function getStoredSettings() {
      return {
        chippApiKey: localStorage.getItem('autotask_chipp_api_key'),
        googleClientId: localStorage.getItem('autotask_google_client_id'),
        googleClientSecret: localStorage.getItem('autotask_google_client_secret'),
        clickupClientId: localStorage.getItem('autotask_clickup_client_id'),
        clickupClientSecret: localStorage.getItem('autotask_clickup_client_secret')
      };
    }

    async function loginWithGoogle() {
      const settings = getStoredSettings();

      if (!settings.googleClientId || !settings.googleClientSecret) {
        alert('Please configure your Google OAuth credentials in Settings first.');
        window.location.href = '/settings';
        return;
      }

      try {
        const response = await fetch('/client-auth/google/url', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            googleClientId: settings.googleClientId,
            googleClientSecret: settings.googleClientSecret
          })
        });

        const data = await response.json();

        if (data.authUrl) {
          window.location.href = data.authUrl;
        } else {
          alert('Failed to generate authentication URL: ' + (data.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error starting Google authentication:', error);
        alert('Error starting authentication. Please try again.');
      }
    }

    // ClickUp client-side authentication
    async function connectClickUp() {
      const settings = getStoredSettings();

      if (!settings.clickupClientId || !settings.clickupClientSecret) {
        alert('Please configure your ClickUp OAuth credentials in Settings first.');
        window.location.href = '/settings';
        return;
      }

      try {
        // First, prepare the credentials for OAuth flow
        const prepareResponse = await fetch('/client-auth/clickup/prepare', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            clickupClientId: settings.clickupClientId,
            clickupClientSecret: settings.clickupClientSecret
          })
        });

        const prepareData = await prepareResponse.json();

        if (!prepareData.success) {
          throw new Error(prepareData.error || 'Failed to prepare ClickUp authentication');
        }

        // Now get the auth URL
        const urlResponse = await fetch('/client-auth/clickup/url', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            clickupClientId: settings.clickupClientId
          })
        });

        const urlData = await urlResponse.json();

        if (urlData.authUrl) {
          // Open ClickUp OAuth in a popup window
          const popup = window.open(
            urlData.authUrl,
            'clickup-auth',
            'width=600,height=700,scrollbars=yes,resizable=yes'
          );

          // Listen for the popup to close or send a message
          const checkClosed = setInterval(() => {
            if (popup.closed) {
              clearInterval(checkClosed);
              // Check if ClickUp authentication was successful by making a test request
              setTimeout(() => {
                checkClickUpAuthStatus();
              }, 1000);
            }
          }, 1000);

          // Listen for messages from the popup (if the callback sends postMessage)
          window.addEventListener('message', function(event) {
            if (event.origin !== window.location.origin) return;

            if (event.data.type === 'clickup-auth-success') {
              clearInterval(checkClosed);
              popup.close();

              // Update JWT token if provided
              if (event.data.newToken) {
                updateJWTCookie(event.data.newToken);
              }

              handleClickUpAuthSuccess(event.data.clickup);
            } else if (event.data.type === 'clickup-auth-error') {
              clearInterval(checkClosed);
              popup.close();
              throw new Error(event.data.error || 'ClickUp authentication failed');
            }
          });
        } else {
          throw new Error(urlData.error || 'Failed to generate ClickUp auth URL');
        }
      } catch (error) {
        console.error('Error starting ClickUp authentication:', error);
        alert('Error starting ClickUp authentication: ' + error.message);
      }
    }

    // Helper functions for ClickUp authentication
    async function checkClickUpAuthStatus() {
      try {
        const response = await fetch('/client-auth/clickup/workspaces');
        const data = await response.json();

        if (data.workspaces) {
          // ClickUp authentication was successful
          handleClickUpAuthSuccess({ teams: data.workspaces });
        } else {
          console.log('ClickUp authentication may have failed or been cancelled');
        }
      } catch (error) {
        console.log('ClickUp authentication check failed:', error);
      }
    }

    function handleClickUpAuthSuccess(clickupData) {
      console.log('‚úÖ ClickUp authentication successful!', clickupData);

      // Show success message
      showClickUpSuccessMessage();

      // Update the ClickUp section UI
      updateClickUpUI(clickupData);

      // Load workspaces for configuration
      console.log('üîÑ Scheduling loadWorkspaces() call in 1 second...');
      setTimeout(() => {
        console.log('‚è∞ Now calling loadWorkspaces()...');
        loadWorkspaces();
      }, 1000);
    }

    function showClickUpSuccessMessage() {
      // Remove any existing success message
      const existingMessage = document.getElementById('clickup-success-message');
      if (existingMessage) {
        existingMessage.remove();
      }

      // Create and show new success message
      const successMessage = document.createElement('div');
      successMessage.id = 'clickup-success-message';
      successMessage.className = 'success';
      successMessage.innerHTML = `
        <span>‚úÖ ClickUp authentication successful! Please configure your default workspace below.</span>
        <button class="close-btn" onclick="closeSuccessMessage()" title="Close">&times;</button>
      `;

      // Insert after the error div (if it exists) or at the beginning of the body
      const errorDiv = document.querySelector('.error');
      if (errorDiv) {
        errorDiv.parentNode.insertBefore(successMessage, errorDiv.nextSibling);
      } else {
        const header = document.querySelector('.header');
        header.parentNode.insertBefore(successMessage, header.nextSibling);
      }

      // Auto-fade after 8 seconds
      setTimeout(() => {
        if (successMessage && !successMessage.classList.contains('fade-out')) {
          closeSuccessMessage();
        }
      }, 8000);
    }

    function updateClickUpUI(clickupData) {
      // Update the ClickUp status indicator
      const statusIndicator = document.querySelector('.clickup-section .status-indicator');
      const statusText = statusIndicator?.nextElementSibling;

      if (statusIndicator && statusText) {
        statusIndicator.className = 'status-indicator status-connected';
        statusText.textContent = 'Connected to ClickUp';

        // Add configuration needed text
        const configText = document.createElement('span');
        configText.style.marginLeft = '10px';
        configText.style.color = '#F59E0B';
        configText.textContent = '‚ö†Ô∏è Configuration needed';
        statusText.parentNode.appendChild(configText);
      }

      // Show the workspace selector
      const clickupSection = document.querySelector('.clickup-section');
      const connectButton = clickupSection?.querySelector('.btn-clickup');

      if (connectButton && connectButton.textContent.includes('Connect ClickUp')) {
        // Replace the connect button with workspace selector
        const workspaceSelector = document.createElement('div');
        workspaceSelector.innerHTML = `
          <p>Choose your default workspace and list for task creation:</p>
          <div class="workspace-selector">
            <select id="workspaceSelect" onchange="onWorkspaceChange()">
              <option value="">Select a workspace...</option>
            </select>
            <button id="configureBtn" class="btn btn-clickup" onclick="configureClickUp()" disabled>
              ‚úÖ Configure Default List
            </button>
          </div>
        `;

        connectButton.parentNode.replaceChild(workspaceSelector, connectButton);
      }
    }

    // Load current user state on page load to fix JWT cookie timing issues
    window.addEventListener('DOMContentLoaded', function() {
      refreshUserState();
    });

    async function refreshUserState() {
      try {
        const response = await fetch('/api/user-state');
        const data = await response.json();

        if (data.authenticated) {
          console.log('üîÑ Refreshing UI with current user state:', data);

          // Update emails if they exist and no emails are already displayed
          if (data.emails && data.emails.length > 0) {
            // Check if emails are already rendered server-side
            const existingEmails = document.querySelectorAll('.email-card');
            if (existingEmails.length === 0) {
              // No server-side emails, use client-side rendering
              updateEmailsDisplay(data.emails);
            }
            // Hide the fetch emails button since emails are already loaded
            const fetchButton = document.getElementById('fetchEmailsBtn');
            if (fetchButton) {
              fetchButton.style.display = 'none';
            }
          }

          // Update ClickUp state if connected
          if (data.clickup && data.clickup.access_token) {
            console.log('üîç ClickUp data in refreshUserState:', data.clickup);
            if (data.clickup.configured) {
              // Show configured state
              console.log('üîß ClickUp is configured, updating UI');
              updateClickUpConfiguredUI(data.clickup.defaultList);
            } else {
              // Show connected but not configured state
              console.log('üîó ClickUp is connected but not configured, loading workspaces');
              updateClickUpUI({ teams: data.clickup.teams });
              // Load workspaces for configuration
              setTimeout(() => {
                console.log('‚è∞ Calling loadWorkspaces() after timeout');
                loadWorkspaces();
              }, 500);
            }
          } else {
            console.log('‚ùå No ClickUp access_token found in user state:', data.clickup);
          }
        }
      } catch (error) {
        console.error('‚ùå Error refreshing user state:', error);
      }
    }

    async function loadWorkspaces() {
      try {
        console.log('üåê Making request to /client-auth/clickup/workspaces...');
        const response = await fetch('/client-auth/clickup/workspaces');
        console.log('üì° Response received:', response.status, response.statusText);

        const data = await response.json();
        console.log('üìä Response data:', data);

        if (data.workspaces) {
          workspaces = data.workspaces;
          console.log(`‚úÖ Loaded ${workspaces.length} workspaces`);
          populateWorkspaceSelect();
        } else {
          console.error('‚ùå Failed to load workspaces:', data.error);
        }
      } catch (error) {
        console.error('‚ùå Error loading workspaces:', error);
      }
    }

    function populateWorkspaceSelect() {
      const select = document.getElementById('workspaceSelect');
      select.innerHTML = '<option value="">Select a workspace...</option>';

      workspaces.forEach((workspace, index) => {
        workspace.lists.forEach(list => {
          const option = document.createElement('option');
          option.value = JSON.stringify({
            listId: list.id,
            listName: list.name,
            spaceName: workspace.space.name,
            teamName: workspace.team.name,
            workspaceIndex: index
          });
          option.textContent = `${workspace.team.name} > ${workspace.space.name} > ${list.name}`;
          select.appendChild(option);
        });
      });
    }

    function onWorkspaceChange() {
      const select = document.getElementById('workspaceSelect');
      const configureBtn = document.getElementById('configureBtn');

      if (select.value) {
        selectedWorkspace = JSON.parse(select.value);
        configureBtn.disabled = false;
      } else {
        selectedWorkspace = null;
        configureBtn.disabled = true;
      }
    }

    async function configureClickUp() {
      if (!selectedWorkspace) {
        alert('Please select a workspace first');
        return;
      }

      try {
        const response = await fetch('/client-auth/clickup/configure', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            listId: selectedWorkspace.listId,
            listName: selectedWorkspace.listName,
            spaceName: selectedWorkspace.spaceName,
            teamName: selectedWorkspace.teamName
          })
        });

        const data = await response.json();

        if (data.success) {
          // Update JWT token cookie immediately for Vercel compatibility
          if (data.newToken) {
            updateJWTCookie(data.newToken);
          }

          // Update the UI to show configured state
          updateClickUpConfiguredUI(data.defaultList);
          alert('ClickUp configuration saved successfully!');
        } else {
          alert('Failed to save configuration: ' + data.error);
        }
      } catch (error) {
        console.error('Error configuring ClickUp:', error);
        alert('Error configuring ClickUp. Please try again.');
      }
    }

    function updateClickUpConfiguredUI(defaultList) {
      // Update the ClickUp section to show configured state
      const clickupSection = document.querySelector('.clickup-section');
      const statusIndicator = clickupSection.querySelector('.status-indicator');
      const statusText = statusIndicator?.nextElementSibling;

      if (statusIndicator && statusText) {
        statusIndicator.className = 'status-indicator status-connected';
        // Remove any existing warning text and replace with configured status
        statusText.innerHTML = `Connected to ClickUp <span style="margin-left: 10px; color: #10B981;">‚úì Configured (Default: ${defaultList.name})</span>`;

        // Remove any configuration warning elements
        const configWarning = statusText.parentNode.querySelector('span[style*="color: #F59E0B"]');
        if (configWarning) {
          configWarning.remove();
        }
      }

      // Replace workspace selector with configured message and reconfigure button
      const workspaceSelector = clickupSection.querySelector('.workspace-selector');
      if (workspaceSelector) {
        const configuredDiv = document.createElement('div');
        configuredDiv.innerHTML = `
          <p>‚úÖ ClickUp is configured and ready! Tasks will be created in: <strong>${defaultList.name}</strong></p>
          <button class="btn btn-clickup" onclick="reconfigureClickUp()">üîÑ Reconfigure</button>
        `;
        workspaceSelector.parentNode.replaceChild(configuredDiv, workspaceSelector);
      }
    }

    function reconfigureClickUp() {
      if (confirm('Are you sure you want to reconfigure your ClickUp integration?')) {
        // Reset configuration
        fetch('/client-auth/clickup/configure', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ reset: true })
        }).then(() => {
          window.location.reload();
        });
      }
    }

    // Email fetching function
    async function fetchEmails() {
      const button = document.getElementById('fetchEmailsBtn');
      const statusDiv = document.getElementById('fetch-status');

      // Disable button and show loading
      button.disabled = true;
      button.innerHTML = '‚è≥ Fetching Emails...';

      statusDiv.style.display = 'block';
      statusDiv.className = 'processing-status loading';
      statusDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
          <div class="spinner"></div>
          <span>üìß Fetching your latest emails from Gmail...</span>
        </div>
      `;

      try {
        const response = await fetch('/emails/recent', {
          method: 'GET',
          headers: {
            'Accept': 'application/json'
          }
        });

        const data = await response.json();

        if (data.success) {
          console.log('‚úÖ Emails fetched successfully:', data);

          // Update JWT token cookie immediately for Vercel compatibility
          if (data.newToken) {
            updateJWTCookie(data.newToken);
          }

          // Show success status
          statusDiv.className = 'processing-status success';
          statusDiv.innerHTML = `
            <div>‚úÖ Successfully fetched ${data.emailCount} emails! Updating display...</div>
          `;

          // Update the UI with the fetched emails
          setTimeout(() => {
            updateEmailsDisplay(data.emails);
            // Hide the fetch button and status
            button.style.display = 'none';
            statusDiv.style.display = 'none';
          }, 1000);

        } else {
          console.error('‚ùå Email fetching failed:', data);
          throw new Error(data.error || 'Failed to fetch emails');
        }

      } catch (error) {
        console.error('‚ùå Error fetching emails:', error);

        // Show error status
        statusDiv.className = 'processing-status error';
        statusDiv.innerHTML = `
          <div>‚ùå Error: ${error.message}</div>
          <div style="margin-top: 8px;">
            <button class="btn" onclick="retryFetchEmails()" style="font-size: 12px; padding: 6px 12px;">
              üîÑ Retry
            </button>
          </div>
        `;

        // Re-enable button
        button.disabled = false;
        button.innerHTML = 'üìß Fetch Latest Emails';
      }
    }

    function retryFetchEmails() {
      // Reset status and retry
      const statusDiv = document.getElementById('fetch-status');
      statusDiv.style.display = 'none';
      fetchEmails();
    }

    function updateEmailsDisplay(emails) {
      // Remove the empty state if it exists
      const emptyState = document.querySelector('.empty-state');
      if (emptyState) {
        emptyState.remove();
      }

      // Find the container where emails should be displayed
      let emailContainer = document.querySelector('.email-container');
      if (!emailContainer) {
        // Create email container after the ClickUp section
        const clickupSection = document.querySelector('.clickup-section');
        emailContainer = document.createElement('div');
        emailContainer.className = 'email-container';
        emailContainer.innerHTML = '<h2>üì¨ Your Recent Emails</h2>';
        clickupSection.parentNode.insertBefore(emailContainer, clickupSection.nextSibling);
      }

      // Clear existing emails
      const existingEmails = emailContainer.querySelectorAll('.email-card');
      existingEmails.forEach(card => card.remove());

      // Add new emails
      emails.forEach(email => {
        const emailCard = document.createElement('div');
        emailCard.className = 'email-card';

        // Check if email has been processed
        const isProcessed = email.chippResponse || email.clickupTaskUrl;

        let actionsHtml = '';
        if (isProcessed) {
          // Show processed results
          if (email.clickupTaskUrl) {
            // ClickUp task was successfully created - show clean success message
            actionsHtml = `
              <div class="success task-success">
                <span>‚úÖ Task created successfully!</span>
                <button class="close-btn" onclick="closeTaskSuccess('${email.id}')" title="Close">&times;</button>
              </div>
              <div class="task-link-container">
                <a href="${email.clickupTaskUrl}" target="_blank" class="btn btn-clickup">
                  üîó View Task in ClickUp
                </a>
              </div>
            `;
          } else {
            // Show full response for non-ClickUp responses
            actionsHtml = `
              <div class="chipp-response">
                <h3>üéØ AutoTask AI Suggestion:</h3>
                <div class="response-content">${escapeHtml(email.chippResponse).replace(/\n/g, '<br>')}</div>
              </div>
            `;
          }
        } else {
          // Show process button
          actionsHtml = `
            <button type="button" class="btn" onclick="processEmail('${email.id}')">
              üöÄ Create Task from Email
            </button>
            <div id="status-${email.id}" class="processing-status" style="display: none;"></div>
          `;
        }

        emailCard.innerHTML = `
          <div class="email-header">
            <div class="email-subject">${escapeHtml(email.subject)}</div>
            <div class="email-date">${escapeHtml(email.date)}</div>
          </div>
          <div class="email-from">From: ${escapeHtml(email.from)}</div>
          <div class="email-snippet">${escapeHtml(email.snippet)}</div>
          <div id="email-${email.id}-actions">
            ${actionsHtml}
          </div>
        `;
        emailContainer.appendChild(emailCard);
      });
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Function to update JWT cookie for Vercel compatibility
    function updateJWTCookie(newToken) {
      // Set the cookie with the new JWT token
      document.cookie = `authToken=${newToken}; path=/; max-age=${24 * 60 * 60}; SameSite=Lax`;
      console.log('üç™ Updated JWT cookie with new token');
    }

    // Email processing functions
    async function processEmail(emailId) {
      const button = document.querySelector(`button[onclick="processEmail('${emailId}')"]`);
      const statusDiv = document.getElementById(`status-${emailId}`);
      const actionsDiv = document.getElementById(`email-${emailId}-actions`);

      // Disable button and show loading
      button.disabled = true;
      button.innerHTML = '‚è≥ Processing...';

      statusDiv.style.display = 'block';
      statusDiv.className = 'processing-status loading';
      statusDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
          <div class="spinner"></div>
          <span>ü§ñ Sending email to Chipp.ai for analysis...</span>
        </div>
      `;

      try {
        console.log(`üöÄ Starting email processing for ID: ${emailId}`);

        // Get Chipp API key from localStorage
        const chippApiKey = localStorage.getItem('autotask_chipp_api_key');
        if (!chippApiKey) {
          throw new Error('Chipp API key not found. Please configure it in Settings.');
        }

        const response = await fetch(`/emails/process/${emailId}`, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            chippApiKey: chippApiKey
          })
        });

        const data = await response.json();

        if (data.success) {
          console.log('‚úÖ Email processing successful:', data);

          // Show success status
          statusDiv.className = 'processing-status success';
          statusDiv.innerHTML = `
            <div>‚úÖ Task analysis complete! Updating display...</div>
          `;

          // Wait a moment then reload to show the response
          setTimeout(() => {
            window.location.reload();
          }, 1500);

        } else {
          console.error('‚ùå Email processing failed:', data);
          throw new Error(data.error || 'Processing failed');
        }

      } catch (error) {
        console.error('‚ùå Error processing email:', error);

        // Show error status
        statusDiv.className = 'processing-status error';
        statusDiv.innerHTML = `
          <div>‚ùå Error: ${error.message}</div>
          <div style="margin-top: 8px;">
            <button class="btn" onclick="retryProcessEmail('${emailId}')" style="font-size: 12px; padding: 6px 12px;">
              üîÑ Retry
            </button>
          </div>
        `;

        // Re-enable button
        button.disabled = false;
        button.innerHTML = 'üöÄ Create Task from Email';
      }
    }

    function retryProcessEmail(emailId) {
      // Reset status and retry
      const statusDiv = document.getElementById(`status-${emailId}`);
      statusDiv.style.display = 'none';
      processEmail(emailId);
    }

    // Success message functions
    function closeSuccessMessage() {
      const successMessage = document.getElementById('clickup-success-message');
      if (successMessage) {
        successMessage.classList.add('fade-out');
        setTimeout(() => {
          successMessage.style.display = 'none';
        }, 500);
      }
    }

    function closeTaskSuccess(emailId) {
      const taskSuccess = document.querySelector(`#email-${emailId}-actions .task-success`);
      if (taskSuccess) {
        taskSuccess.classList.add('fade-out');
        setTimeout(() => {
          taskSuccess.style.display = 'none';
        }, 500);
      }
    }

    // Auto-fade success message after 8 seconds
    <% if (clickupAuth === 'success') { %>
      window.addEventListener('DOMContentLoaded', function() {
        setTimeout(() => {
          const successMessage = document.getElementById('clickup-success-message');
          if (successMessage && !successMessage.classList.contains('fade-out')) {
            closeSuccessMessage();
          }
        }, 8000); // 8 seconds
      });
    <% } %>
  </script>
</body>
</html>
